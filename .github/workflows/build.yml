name: Build FFmpeg

on:
  workflow_dispatch:
env:
  DOCKER_BUILDKIT: 1

jobs:
  purge_artifacts:
    name: Purge old artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Purge old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: 0 days
          skip-recent: 3
          
  build_base:
    name: Build base image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::giantsoft2dock/ffmpeg-base"
      - name: Build base image
        run: docker build --pull --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from ${{ steps.imagename.outputs.name }} --tag ${{ steps.imagename.outputs.name }}:latest images/base
      - name: Push base image
        run: docker push ${{ steps.imagename.outputs.name }}:latest
  build_target_bases:
    name: Build target base image
    needs: build_base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win32]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::giantsoft2dock/ffmpeg-base-${{ matrix.target }}"
      - name: Build target base image
        run: docker build --pull --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg GH_REPO=${GITHUB_REPOSITORY,,} --cache-from ${{ steps.imagename.outputs.name }} --tag ${{ steps.imagename.outputs.name }}:latest images/base-${{ matrix.target }}
      - name: Push target base image
        run: docker push ${{ steps.imagename.outputs.name }}:latest
  build_targets:
    name: Build target-variant image
    needs: build_target_bases
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win32]
        variant: [gpl-shared 4.2,lgpl-shared 4.2]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install buildx
        uses: docker/setup-buildx-action@v1
      - name: Generate Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Image Name
        id: imagename
        run: |
          IMG="giantsoft2dock/ffmpeg-${{ matrix.target }}-${{ matrix.variant }}"
          echo "::set-output name=name::${IMG/ /-}:latest"
          echo "::set-output name=cache_name::${IMG/ /-}:cache"
      - name: Build variant image
        run: |
          docker buildx build \
            --pull \
            --tag ${{ steps.imagename.outputs.name }} \
            --cache-to=type=registry,mode=max,ref=${{ steps.imagename.outputs.cache_name }} \
            --cache-from=type=registry,ref=${{ steps.imagename.outputs.cache_name }} \
            --output=type=image,push=true,name=${{ steps.imagename.outputs.name }} \
            .
  build_ffmpeg:
    name: Build ffmpeg
    needs: build_targets
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win32]
        variant: [gpl-shared 4.2.2,lgpl-shared 4.2.2]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build ffmpeg
        run: ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg
          path: artifacts/*
  publish_release:
    name: Publish release
    if: github.event_name != 'push'
    needs: build_ffmpeg
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ffmpeg
          path: artifacts
      - name: Create release
        id: create_release
        run: |
          set -xe
          NAME="Auto-Build $(date +'%Y-%m-%d %H:%M')"
          TAGNAME="autobuild-$(date +'%Y-%m-%d-%H-%M')"
          hub release create $(for a in artifacts/*.zip; do echo -a $a; done) -m "$NAME" -t "master" "$TAGNAME"
          echo "::set-output name=tag_name::${TAGNAME}"
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Update Wiki
        run: ./util/update_wiki.sh artifacts ${{ steps.create_release.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Prune old releases
        run: ./util/prunetags.sh
        env:
          GITHUB_TOKEN: ${{ github.token }}
